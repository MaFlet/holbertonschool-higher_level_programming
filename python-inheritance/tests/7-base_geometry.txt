"BaseGeometry" module
====================

Using "BaseGeometry"
------------------
   >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
   >>> bg = BaseGeometry()

TEST CONDITIONS
==================
>>> print(bg.__dict__)
{}

Testing inistiating area
***
>>> try:
...     bg.area()
... except Exception as err:
...     print(err)
area() is not implemented

Testing integer validator
***
>>> try:
...     bg.integer_validator("n", 1)
... except Exception as err:
...     print(err)

>>> try:
...     bg.integer_validator("n", -1)
... except Exception as err:
...    print(err)
n must be greater than 0

>>> try:
...     bg.integer_validator("n", 3.33)
... except Exception as err:
...    print(err)
n must be an integer

>>> try:
...     bg.integer_validator("n", 0)
... except Exception as err:
...     print(err)
n must be greater than 0

>>> try:
...     bg.integer_validator("n", "33")
... except Exception as err:
...     print(err)
n must be an integer

>>> try:
...     bg.integer_validator("n", (0,))
... except Exception as err:
...     print(err)
n must be an integer

>>> try:
...     bg.integer_validator(None, None)
... except Exception as err:
...     print(err)
None must be an integer

>>> try:
...     bg.integer_validator("n")
... except Exception as err:
...     print(err)
integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator("n", [9])
... except Exception as err:
...     print(err)
n must be an integer

>>> try:
...     bg.integer_validator("n", {9})
... except Exception as err:
...     print(err)
n must be an integer

>>> try:
...     bg.integer_validator()
... except Exception as err:
...     print(err)
integer_validator() missing 2 required positional arguments: 'name' and 'value'
